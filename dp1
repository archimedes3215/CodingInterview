## Title: 路径的最小路径和
## Description:
  给定一个矩阵matrix, 从左上角开始每次只能向右或者向下走，最后到达右下角的位置，路径上的所有数字累加起来就是路径和，返回所有路径中最小的路径和.
## Solution
### Method1:
  使用经典DP算法，**dp[i][j] = min{dp[i-1][j], dp[i][j-1]} + matrix[i][j]**;
  1.先求出第一行和第一列的dp值;
  2.然后用2个for循环，用dp公式求解
  3.返回矩阵右下角的值...
  
```
public int findMinSum(int[][] matrix) {
        if (matrix == null || matrix.length < 1 || matrix[0].length < 1) 
            return 0;
        int row = matrix.length;    //行数
        int col = matrix[0].length; //列数
        int[][] dp = new int[row][col];
        dp[0][0] = matrix[0][0];
        //求第一列的值，自上往下
        for (int i = 1; i < row; i++) {
            dp[i][0] = dp[i - 1][0] + matrix[i][0];
        }
        //求第一行的值，从左往右
        for (int i = 1; i < col; i++) {
            dp[0][i] = dp[0][i - 1] + matrix[0][i];
        }
        for (int i = 1; i < row; i++) {
            for (int j = 1; j < col; j++) {
                dp[i][j] = Math.min(dp[i][j - 1], dp[i - 1][j]) + matrix[i][j];
            }
        }
        return dp[row - 1][col - 1];
    }
```
### Method2:
  使用压缩空间方法求解刚才的dp问题...
  其核心思想是使用一个一维数组arr[less](less = min(M,N)即M,N中较小的一个维度)来标识当前路径的最小和，思路如下：
  1.这里首先做出假设，行多列少，那么就按照列的大小定义arr数组，先求出arr第一行的值，即arr[i] arr[i-1] + matrix[0][i];
  2.在第一行的基础上，求出后面的行数，求第二行即arr[2] = min{arr[1], arr[2]} + matrix[1][2]; 这里可以知道，arr[1]是其左边的值，arr[2]是第一行的值，这里按照左和上比大小，找到小的再加上后面matrix;
  ```
  public int findMinSum2(int[][] matrix) {
        if (matrix == null || matrix.length < 1 || matrix[0].length < 1) return 0;
        int less = Math.min(matrix.length, matrix[0].length);
        int more = Math.max(matrix.length, matrix[0].length);
        //判断行是最大不？若行是最大，那么就可以每次计算列，否则反之
        boolean rowIsMore = matrix.length > matrix[0].length;
        int[] arr = new int[less];
        arr[0] = matrix[0][0];
        //第一行的开销
        for (int i = 1; i < less; i++) {
            //这里matrix的是列在变化
            arr[i] = arr[i - 1] + (rowIsMore ? matrix[0][i] : matrix[i][0]);
        }
        
        for (int i = 1; i < more; i++) {
            //arr[0]代表当前行的第一列的值,是arr[0]加上当前开销
            arr[0] = arr[0] + (rowIsMore ? matrix[i][0] : matrix[0][i]);
            //算法的核心，就是比较其左边和上边哪个值更小...
            for (int j = 1; j < less; j++) {
                arr[j] = Math.min(arr[j - 1], arr[j]) + (rowIsMore ? matrix[i][j] : matrix[j][i]);
            }
        }
        return arr[less - 1];
    }
  ```
  
 ## Conclusion
 使用方法2的压缩空间算法可以快速求出二维动态规划的面试题，通过一个数组的滚动更新方式节省了大量的空间，对于某个位置的动态规划求解过程，只需要1次寻址，程序的常数时间得到一定程度的加速...但是不适用于让***回溯出具体路径***的题目...

  
